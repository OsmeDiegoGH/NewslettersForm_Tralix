apply plugin: 'war'

repositories {
    mavenCentral()
}

dependencies {
    providedCompile "javax.servlet:javax.servlet-api:3.0.1"
    
    runtime fileTree(dir: 'libs', include: '*.jar')
    
    compile "com.google.code.gson:gson:2.2.4",
            "axis:axis:1.4",
            "log4j:log4j:1.2.17",
            "org.springframework.security:spring-security-config:3.2.5.RELEASE",
            "org.springframework.security:spring-security-web:3.2.5.RELEASE",
            "org.springframework:spring-webmvc:4.3.4.RELEASE",
            "kr.pe.kwonnam.jsp:jsp-template-inheritance:0.3.RELEASE",
            "org.codehaus.jackson:jackson-core-asl:1.9.13",
            "org.codehaus.jackson:jackson-mapper-asl:1.9.13",
            "javax.annotation:javax.annotation-api:1.2",
            "org.hibernate:hibernate-core:3.6.3.Final",
            fileTree(dir: 'libs', include: '*.jar')
            
    testCompile "org.springframework:spring-test:3.2.14.RELEASE",
                "junit:junit:4.12",
                "org.mockito:mockito-core:2.0.57-beta",
                "pl.pragmatists:JUnitParams:1.0.5",
                "javax.servlet:javax.servlet-api:3.1.0"
}

def IS_WINDOWS = System.getProperty("os.name").toLowerCase().contains("windows");
    
def jbossDir = (IS_WINDOWS) ? jbossDir_WINDOWS : jbossDir_UNIX;
task deploy << {
    def warName = rootProject.name + ".war"
    def mainPropertiesName = rootProject.name + ".properties"
    def logPropertiesName = rootProject.name + "Log.properties"
    
    copy{
        from(file("$buildDir/libs/$warName"))
        into("$jbossDir/standalone/deployments")
    }
    copy{
        from(file("$rootDir/$propertiesDir/$mainPropertiesName"))
        into("$jbossDir/standalone/configuration/Applications/")
    }
    copy{
        from(file("$rootDir/$propertiesDir/$logPropertiesName"))
        into("$jbossDir/standalone/configuration/Applications/")
    }
}

build.finalizedBy(deploy)